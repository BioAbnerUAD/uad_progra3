#pragma once
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <iostream>
using namespace std;

//>------ Id Chunk

#define MAIN3DS       0x4D4D

//>------ Main Chunks

#define EDIT3DS       0x3D3D  // this is the start of the editor config
#define KEYF3DS       0xB000  // this is the start of the keyframer config

//>------ sub defines of EDIT3DS

#define EDIT_MATERIAL 0xAFFF
#define EDIT_CONFIG1  0x0100
#define EDIT_CONFIG2  0x3E3D
#define EDIT_VIEW_P1  0x7012
#define EDIT_VIEW_P2  0x7011
#define EDIT_VIEW_P3  0x7020
#define EDIT_VIEW1    0x7001
#define EDIT_BACKGR   0x1200
#define EDIT_AMBIENT  0x2100
#define EDIT_OBJECT   0x4000

#define EDIT_UNKNW01  0x1100
#define EDIT_UNKNW02  0x1201
#define EDIT_UNKNW03  0x1300
#define EDIT_UNKNW04  0x1400
#define EDIT_UNKNW05  0x1420
#define EDIT_UNKNW06  0x1450
#define EDIT_UNKNW07  0x1500
#define EDIT_UNKNW08  0x2200
#define EDIT_UNKNW09  0x2201
#define EDIT_UNKNW10  0x2210
#define EDIT_UNKNW11  0x2300
#define EDIT_UNKNW12  0x2302 // new chunk type
#define EDIT_UNKNW13  0x3000
#define EDIT_UNKNW14  0xAFFF

//>------ sub defines of EDIT_OBJECT

#define OBJ_TRIMESH   0x4100
#define OBJ_LIGHT     0x4600
#define OBJ_CAMERA    0x4700

#define OBJ_UNKNWN01  0x4010
#define OBJ_UNKNWN02  0x4012 //>>---- Could be shadow

//>------ sub defines of OBJ_TRIMESH
#define TRI_MAPPINGCOORS 0x4140
#define TRI_VERTEXL   0x4110
#define TRI_FACEL2    0x4111 // unknown yet
#define TRI_FACEL1    0x4120
#define TRI_SMOOTH    0x4150
#define TRI_LOCAL     0x4160
#define TRI_VISIBLE   0x4165


struct DinamicOBJ
{
	vector<unsigned short> indices;
	vector<unsigned short> indicesNorm;
	vector<unsigned short> indicesUVs;
	vector<float> vertices;
	vector<float> normals;
	vector<float> UVcoords;

	DinamicOBJ()
	{
		indices.clear();
		indicesNorm.clear();
		indicesUVs.clear();
		vertices.clear();
		normals.clear();
		UVcoords.clear();
	}
};

class C3dsFile
{
private:
	/*unsigned int m_shaderProgramId;                                   // Shader program identifier generated by OpenGL
	unsigned int m_graphicsMemoryObjectId;                            // Vertex Array Object identifier generated by OpenGL*/

	unsigned short *m_vertexIndices;                                  // Dynamically-allocated array of vertex indices for this model
	unsigned short *m_normalIndices;                                  // Dynamically-allocated array of normal indices for this model
	unsigned short *m_UVindices;                                      // Dynamically-allocated array of UV coord indices for this model

	float *m_vertices;                                             // Dynamically-allocated array of vertices
	float *m_normals;                                              // Dynamically-allocated array of normals
	float *m_UVCoords;                                             // Dynamically-allocated array of UV coords

	int m_numVertices, m_numNormals, m_numUVCoords, m_numFaces;       // Total number of vertices, normals, UV coords, and faces in this model
	int m_currentVertex, m_currentNormal, m_currentUV, m_currentFace; // Aux counters used when loading an object from file

	bool m_Initialized;                                               // Does this C3dsFile object contain valid data? (loaded from file)

																	  // Methods to read a model in the .obj file format
	void reset();                                                     // Cleanup any allocated memory

	/*---------------Variables and Functions for reading procedure----------------*/

	ifstream bin3ds;
	unsigned long current_chunk = 0L;
	unsigned char views_read = 0;
	string temp_name;
	float trans_mat[4][4]; // translation matrix for objects
	DinamicOBJ* dinObj;

	unsigned char ReadChar();
	unsigned short ReadInt();
	unsigned long ReadLong();
	float ReadFloat();
	unsigned long ReadChunkPointer();
	unsigned long GetChunkPointer();
	void ChangeChunkPointer(unsigned long temp_pointer);
	int ReadName(bool isLongName);
	unsigned long ReadChunk(unsigned int chunk_id);
	bool ReadPrimaryChunk();

	/*----------------------------------------------------------------------------*/

public:
	C3dsFile(string file);
	C3dsFile();
	~C3dsFile();

	C3dsFile(const C3dsFile & obj);

	bool Build3DS(string file);										  // Read File and Parse contents into object
	string toString();

	bool isInitialized() const { return m_Initialized; }

	/*unsigned int *getGraphicsMemoryObjectId() { return &m_graphicsMemoryObjectId; }
	void setGraphicsMemoryObjectId(unsigned int id) { m_graphicsMemoryObjectId = id; }

	unsigned int *getShaderProgramId() { return &m_shaderProgramId; }
	void setShaderProgramId(unsigned int id) { m_shaderProgramId = id; }*/

	int getNumVertices() const { return m_numVertices; }
	int getNumNormals() const { return m_numNormals; }
	int getNumUVCoords() const { return m_numUVCoords; }
	int getNumFaces() const { return m_numFaces; }
	float * const getModelVertices() { return m_vertices; }
	float * const getModelNormals() { return m_normals; }
	float * const getModelUVCoords() { return m_UVCoords; }
	unsigned short * const getModelVertexIndices() { return m_vertexIndices; }
	unsigned short * const getModelNormalIndices() { return m_normalIndices; }
	unsigned short * const getModelUVCoordIndices() { return m_UVindices; }
};
